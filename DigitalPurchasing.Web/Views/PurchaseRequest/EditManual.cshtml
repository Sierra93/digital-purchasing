@using DigitalPurchasing.Core.Interfaces
@model DigitalPurchasing.Core.Interfaces.PurchaseRequestDetailsResponse

@{
    ViewBag.Title = $"Заявка № {Model.PublicId} от {User.ToLocalTime(Model.CreatedOn):dd.MM.yyyy HH:mm}";
    Layout = "_Layout";
}

<h2>@ViewBag.Title</h2>

<div id="app">
    <div class="row">
        <div class="col-md-4">
            <div class="form-group" v-bind:class="customerNameClass">
                <label for="customerName">Клиент</label>
                <input type="text" class="form-control" placeholder="" v-model.trim="customerName" v-on:input="updateCustomerName" id="customerName">
                <typeahead v-model="customerAutocomplete" target="#customerName" :async-function="customerAutocompleteFunc" item-key="name"></typeahead>
                <span class="help-block" v-show="customerNameHasError">Укажите имя клиента</span>
                <span class="help-block" v-show="isNewCustomer">Новый клиент</span>
            </div>
        </div>
        <div class="col-md-1">
            <div class="form-group">
                <label for="erp-code">№ в ERP</label>
                <input type="text" class="form-control" id="erp-code" v-model.trim="erpCode" v-on:input="updateErpCode" />
            </div>
        </div>
        @*<div class="col-md-4">
            <div class="form-group">
                <label for="name">ФИО заявителя</label>
                <input type="text" class="form-control" id="name" placeholder="">
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="consignee">Грузополучатель</label>
                <input type="text" class="form-control" id="consignee" placeholder="">
            </div>
        </div>*@
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width: 5%" class="text-center">№</th>
                <th style="width: 20%">Код</th>
                <th>Наименование</th>
                <th style="width: 10%">Количество</th>
                <th style="width: 10%">ЕИ</th>
                <th style="width: 10%">
                    <button type="button" class="btn btn-default" v-on:click="addRow(r)"><i class="far fa-plus-square"></i></button>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="r in rows">
                <td class="text-center">
                    <label>{{getRowIndex(r)}}</label>
                </td>
                <td>
                    <input type="text" class="form-control" v-model.trim="r.rawCode"/>
                </td>
                <td v-bind:class="getInputClass(!isValidName(r.rawName))">
                    <input type="text" class="form-control" v-model.trim="r.rawName"/>
                </td>
                <td v-bind:class="getInputClass(!isValidQty(r.rawQty))">
                    <input type="number" class="form-control" v-model.number="r.rawQty" min="0"/>
                </td>
                <td v-bind:class="getInputClass(!isValidUom(r.rawUom))">
                    <input type="text" class="form-control" v-model.trim="r.rawUom"/>
                </td>
                <td>
                    <button type="button" class="btn btn-default" v-on:click="removeRow(r)"><i class="far fa-minus-square"></i></button>
                    <button type="button" class="btn btn-default" v-on:click="addRow(r)"><i class="far fa-plus-square"></i></button>
                </td>
            </tr>
        </tbody>
    </table>
    <button v-on:click="saveRawItems" class="btn btn-primary" v-bind:disabled="isSaveDisabled">Сохранить изменения</button>
    <div class="row">
        <div class="col-md-6">
            <address-form v-bind:pr="prId"></address-form>
        </div>
    </div>
</div>

@section Scripts
{
    <partial name="~/Views/Shared/Delivery/_AddressFormComponent.cshtml"/>
    <script>
        (function() {
            function getInputClass(hasError) {
                return {
                    'has-error': hasError,
                    'has-success': !hasError
                };
            };

            var app = new Vue({
                el: '#app',
                data: function() {
                    return {
                        prId: '@Model.Id',
                        customerName: '',
                        customerId: null,
                        customerAutocomplete: null,
                        erpCode: null,
                        // { code: '123-321', name: 'Болт 123-321 XYZ', uom: 'шт.', qty: 100 }
                        rows: [],
                        saveRawItemsStarted: false
                    };
                },
                created: function () {
                    var vm = this;
                    this.$http.get('@Url.Action("RawItemsData", new { id = Model.Id })').then(response => {
                        var data = response.body;
                        vm.rows = data.items;
                        vm.customerName = data.customerName;
                        vm.customerId = data.customerId;
                        vm.erpCode = data.erpCode;
                        this.createEmptyRowIfNecessary();
                    }, response => {
                        alert('error');
                    });
                },
                watch: {
                    customerAutocomplete: function(val) {
                        if (val) {
                            if (val.name) {
                                this.customerName = val.name;
                                this.customerId = val.id;
                            } else {
                                this.customerName = this.customerAutocomplete;
                                this.customerId = null;
                            }
                        } else {
                            this.customerName = '';
                            this.customerId = null;
                        }
                        this.updateCustomerName();
                    }
                },
                computed: {
                    customerNameHasError: function() {
                        if (!this.customerName) {
                            return true;
                        }
                        return false;
                    },
                    customerNameClass: function() {
                        return getInputClass(this.customerNameHasError);
                    },
                    isSaveDisabled: function() {
                        return this.customerNameHasError || this.saveRawItemsStarted || !this.allRowAreValid();
                    },
                    isNewCustomer: function() {
                        return this.customerId === null && !this.customerNameHasError;
                    }
                },
                methods: {
                    getInputClass: function(hasError) {
                        return getInputClass(hasError)
                    },
                    getRowIndex0: function (item) {
                        return this.rows.indexOf(item);
                    },
                    getRowIndex: function(item) {
                        return this.getRowIndex0(item)+1;
                    },
                    addRow: function(item) {
                        var index = this.getRowIndex(item);
                        this.rows.splice(index, 0, this.createRow());
                    },
                    removeRow: function(item) {
                        var index = this.rows.indexOf(item);
                        this.rows.splice(index, 1);
                        this.createEmptyRowIfNecessary();
                    },
                    saveRawItems: function () {
                        this.saveRawItemsStarted = true;
                        var $this = this;
                        var data = {
                            purchasingRequestId: '@Model.Id',
                            items: $this.rows
                        };
                        this.$http.post('@Url.Action("SaveRawItemsData")', data).then(response => {
                            var data = response.body;
                            window.location.reload(true); 
                            //$this.rows = data.items;
                        }, response => {
                            alert('error');
                        });
                    },
                    updateCustomerName: _.debounce(function (e) {
                        var data = { name: this.customerName, id: this.prId, customerId: this.customerId  };
                        this.$http.post('@Url.Action("SaveCustomerName", "PurchaseRequest")', data).then(function(res) {
                        }, function(res) {
                            alert('error');
                        });
                    }, 300),
                    updateErpCode: _.debounce(function (e) {
                        var data = { id: this.prId, erpCode: this.erpCode  };
                        this.$http.post('@Url.Action("SaveErpCode", "PurchaseRequest")', data).then(function(res) {
                        }, function(res) {
                            alert('error');
                        });
                    }, 300),
                    customerAutocompleteFunc (query, done) {
                        var vm = this;
                        vm.$http.get('@Url.Action("Autocomplete", "Customer")?q=' + query)
                            .then(res => {
                                var items = res.data.items;
                                var customer = _.find(items, ['name', query]);
                                if (customer) {
                                    vm.customerId = customer.id;
                                }
                                done(res.data.items);
                            })
                            .catch(err => {
                                // any error handler
                            });
                    },
                    createRow: function() {
                        return { rawCode: '', rawName: '', rawUom: '', rawQty: 0 };
                    },
                    createEmptyRowIfNecessary: function() {
                        if (this.rows.length === 0) {
                            this.rows.push(this.createRow());
                        }
                    },
                    isValidName: function(val) {
                        if (val === '') return false;
                        return true;
                    },
                    isValidUom: function(val) {
                        if (val === '') return false;
                        return true;
                    },
                    isValidQty: function(val) {
                        if (val <= 0) return false;
                        return true;
                    },
                    isValidRow: function(row) {
                        return this.isValidName(row.rawName) &&
                            this.isValidUom(row.rawUom) &&
                            this.isValidQty(row.rawQty);
                    },
                    allRowAreValid: function() {
                        var vm = this;
                        return _.every(this.rows, function (r) { return vm.isValidRow(r) });
                    }
                }
            });
        })();
    </script>
}
