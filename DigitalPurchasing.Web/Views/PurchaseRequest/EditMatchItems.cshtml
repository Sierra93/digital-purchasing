@model DigitalPurchasing.Core.Interfaces.PurchaseRequestDetailsResponse

@{
    ViewBag.Title = $"Заявка № {Model.PublicId} от {User.ToLocalTime(Model.CreatedOn):dd.MM.yyyy HH:mm}";
    Layout = "_Layout";
}

<h2>@ViewBag.Title</h2>

<h3>Подбор соответствия номенклатуры в заявке клиента номенклатуре предприятия</h3>

<div id="app">
    <table class="table table-striped">
        <thead>
        <tr>
            <th colspan="4" class="form-inline">
            <div class="form-group">
                <label class="control-label">Номенклатура клиента</label>&nbsp;
                <input class="form-control" type="text" v-model="customerName" readonly="readonly"/>
            </div>
            <th colspan="5" class="form-inline">
                <div class="form-group">
                    <label class="control-label">Номенклатура предприятия</label>&nbsp;
                    <input class="form-control" type="text" value="@Model.CompanyName" readonly="readonly" />
                </div>
                <button class="btn btn-default" v-on:click="createAll" v-show="!isQuotationRequestAvailable">Создать все не сопоставленные позиции</button>
            </th>
        </tr>
        <tr>
            <th style="width: 5%" class="text-center">№</th>
            <th style="width: 10%">Код</th>
            <th>Наименование</th>
            <th style="width: 10%">ЕИ</th>
            <th style="width: 10%" class="border-left">Код</th>
            <th>Наименование</th>
            <th style="width: 10%">ЕИ</th>
            <th style="width: 10%">Коэф.</th>
            <th style="width: 10%"></th>
        </tr>
        </thead>
        <tbody>
            <tr v-for="item in items">
                <td class="text-center">{{getRowIndex(item)}}</td>
                <td>{{item.rawCode}}</td>
                <td>{{item.rawName}}</td>
                <td>{{item.rawUom}}</td>
                <td v-if="isMatched(item)" class="border-left">{{item.nomenclatureCode}}</td>
                <td v-if="isMatched(item)">{{item.nomenclatureName}}</td>
                <td v-if="isMatched(item)">{{item.nomenclatureUom}}</td>
                <td v-if="isMatched(item)">{{item.nomenclatureFactor > 0 ? item.nomenclatureFactor : item.commonFactor}}</td>
                <td v-if="isMatched(item)">
                    <button type="button" class="btn btn-link" v-on:click="openMatch(item)">Изменить</button>
                    <button type="button" class="btn btn-link" v-on:click="openCreate(item)">Создать</button>
                </td>
                <td v-else class="border-left text-center" colspan="5">
                    <button type="button" class="btn btn-link" v-on:click="openMatch(item)">Сопоставить</button>
                    <button type="button" class="btn btn-link" v-on:click="openCreate(item)">Создать</button>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="row">
        <div class="container">
            <a class="btn btn-primary" v-show="isQuotationRequestAvailable" asp-controller="QuotationRequest" asp-action="Create" asp-route-prId="@Model.Id">Запросить предложение</a>
        </div>
    </div>
    <modal v-model="matchModal" title="Сопоставьте номенклатуру заявки с номенклатурой Вашего предприятия" size="lg">
        <table class="table table-striped" v-if="currentItem">
            <tbody>
            <tr>
                <td><b>Юр лицо</b></td>
                <td>{{customerName}}</td>
                <td>@Model.CompanyName</td>
            </tr>
            <tr>
                <td><b>Номенклатура</b></td>
                <td>{{currentItem.rawName}}</td>
                <td>
                    <div class="form-group" v-bind:class="nomenclatureClass">
                        <input id="nomenclature" type="text" class="form-control" v-model="nomenclatureAutocomplete"/>
                        <typeahead v-model="selectedNomenclature" target="#nomenclature" force-select async-src="@Url.Action("Autocomplete", "Nomenclature")?q=" async-key="items" item-key="name"></typeahead>
                    </div>
                </td>
            </tr>
            <tr>
                <td><b>Единица измерения</b></td>
                <td>
                    <div class="form-group" v-bind:class="uomClass">
                        <input id="rawUom" type="text" class="form-control" v-model="uomAutocomplete"/>
                        <typeahead v-model="selectedUom" target="#rawUom" preselect="preselect" force-select async-src="@Url.Action("Autocomplete", "Uom")?q=" async-key="items" item-key="name"></typeahead>
                    </div>
                </td>
                <td>{{selectedNomenclatureUom}}</td>
            </tr>
            <tr>
                <td><b>Коэффициент</b></td>
                <td>1</td>
                <td>
                    <div class="form-inline">
                        <div class="radio">
                            <label>
                                <input type="radio" name="factor" value="c" v-model="factor">
                            </label>
                        </div>
                        <div class="form-group" v-bind:class="factorErrorClass">
                            <label class="control-label">Автоматический&nbsp;<i class="fas fa-info-circle" v-tooltip="'TODO'"></i></label>
                            <input type="text" class="form-control" v-model="currentItem.commonFactor" :disabled="!isFactorCEnabled"/>
                        </div>
                    </div>
                    <div class="form-inline">
                        <div class="radio">
                            <label>
                                <input type="radio" name="factor" value="n" v-model="factor">
                            </label>
                        </div>
                        <div class="form-group" v-bind:class="factorErrorClass">
                            <label class="control-label">Переопределить&nbsp;<i class="fas fa-info-circle" v-tooltip="'TODO'"></i></label>
                            <input type="text" class="form-control" v-model="currentItem.nomenclatureFactor" :disabled="!isFactorNEnabled"/>
                        </div>
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
        <div slot="footer" class="text-center">
            <button v-on:click="prevMatch" v-bind:style="{ visibility: isPrevEnabled ? 'visible' : 'hidden' }" class="btn btn-default pull-left">Предыдущая позиция</button>
            <button v-on:click="closeMatch" class="btn btn-default">Отмена</button>
            <button v-on:click="saveMatch" class="btn btn-primary" :disabled="!isSaveEnabled">Подтвердить</button>
            <button v-on:click="nextMatch" v-bind:style="{ visibility: isNextEnabled ? 'visible' : 'hidden' }" class="btn btn-default pull-right">Следующая позиция</button>
        </div>
    </modal>
    <create-nomenclature-modal v-if="currentItem"
                               :item="currentItem"
                               :show-modal="createModal"
                               v-on:hide="closeCreate"
                               v-on:created="nomenclatureCreated">
    </create-nomenclature-modal>
</div>

@section Scripts {

    <script type="text/x-template" id="create-nomenclature-modal">
        <modal v-model="show"
               title="Создание новой номенклатуры"
               ok-text="Создать"
               cancel-text="Отмена"
               v-on:hide="onModalHide" :backdrop="backdrop">
            <div class="form-group" v-bind:class="{ 'has-error': nameHasError, 'has-success': !nameHasError }">
                <label>Название</label>
                <input id="nom-name" type="text" class="form-control" v-model.trim="nomName" />
            </div>
            <div class="form-group" v-bind:class="{ 'has-error': uomHasError, 'has-success': !uomHasError }">
                <label>ЕИ</label>
                <input id="nom-uom" type="text" class="form-control" v-model="nomUomAutocomplete" />
                <typeahead v-model="nomUomSelected" target="#nom-uom" preselect="preselect" force-select async-src="@Url.Action("Autocomplete", "Uom")?q=" async-key="items" item-key="name"></typeahead>
            </div>
            <div slot="footer">
                <button type="button" class="btn btn-default" v-on:click="show=false"><span>Отмена</span></button>
                <button data-action="auto-focus" type="button" class="btn btn-primary" v-on:click="createNom" :disabled="anyError"><span>Создать и сопоставить</span></button>
            </div>
        </modal>
    </script>

    <script>
        (function() {
            function getInputClass(hasError) {
                return {
                    'has-error': hasError,
                    'has-success': !hasError
                };
            };

            Vue.component('create-nomenclature-modal', {
                template: '#create-nomenclature-modal',
                props: ['showModal', 'item'],
                data: function() {
                    return {
                        show: false,
                        backdrop: false,
                        nomName: null,
                        nomUomAutocomplete: null,
                        nomUomSelected: null
                    };
                },
                computed: {
                    nameHasError: function() {
                        return !this.nomName || this.nomName.length === 0;
                    },
                    uomHasError: function() {
                        return !this.nomUomSelected || !this.nomUomSelected.id;
                    },
                    anyError: function() {
                        return this.nameHasError || this.uomHasError;
                    }
                },
                watch: {
                    showModal: function(val) {
                        this.show = val;
                    },
                    item: function(val) {
                        this.nomName = val.rawName;
                        if (val.rawUomMatchId) {
                            this.loadUom(val.rawUomMatchId);
                        } else {
                            this.nomUomSelected = val.rawUom;
                            this.nomUomAutocomplete = val.rawUom;
                        }
                    }
                },
                methods: {
                    error: function(text) {
                        var msg = '';
                        if (text) {
                            msg = text;
                        } else {
                            msg = 'Что-то пошло не так. Обратитесь к администратору';
                        }
                        this.$notify({
                            type: 'danger',
                            title: 'Ошибка!',
                            content: msg
                        });
                    },
                    onModalHide: function() {
                        this.$emit('hide');
                    },
                    loadUom: function(id) {
                        var vm = this;
                        this.$http.get('@Url.Action("AutocompleteSingle", "Uom")' + '?id=' + id).then(function(res) {
                            var dataRes = res.body;
                            if (dataRes.isSuccess) {
                                vm.nomUomSelected = dataRes.data;
                                vm.nomUomAutocomplete = dataRes.data.name;
                            } else {
                                vm.error();
                            }
                        },
                        function(res) {
                            vm.error();
                        });
                    },
                    createNom: function() {
                        var vm = this;
                        var postData  = {
                            itemId: vm.item.id,
                            uomId: vm.nomUomSelected.id,
                            name: vm.nomName
                        }
                        this.$http.post('@Url.Action("CreateAndSaveMatchItem", "PurchaseRequest")', postData).then(function(res) {
                            var dataRes = res.body;
                            if (dataRes.isSuccess) {
                                vm.show = false;
                                var createdData = {
                                    itemId: postData.itemId,
                                    nomId: dataRes.nomenclatureId,
                                    nomName: postData.name,
                                    nomCode: '',
                                    uomId: vm.nomUomSelected.id,
                                    uomName: vm.nomUomSelected.name
                            };
                                vm.$emit('created', createdData);
                            } else {
                                vm.error(dataRes.message);
                            }
                        }, function(res) {
                            vm.error();
                        });
                    }
                }
            });

            var app = new Vue({
                el: '#app',
                data: function() {
                    return {
                        prId: '@Model.Id',
                        customerName: '',
                        customerId: null,
                        matchModal: false,
                        createModal: false,
                        currentItem: {},
                        selectedNomenclature: null,
                        selectedUom: null,
                        nomenclatureAutocomplete: '',
                        uomAutocomplete: '',
                        items: [],
                        preselect: false,
                        factor: 'c'
                    };
                },
                created: function() {
                    this.loadData();
                },
                watch: {
                    selectedNomenclature: function(val) {
                        if (val) {
                            this.nomenclatureAutocomplete = val.name;
                        }
                        this.loadFactor();
                    },
                    selectedUom: function(val) {
                        if (val) {
                            this.uomAutocomplete = val.name;
                        }
                        this.loadFactor();
                    }
                },
                computed: {
                    isPrevEnabled: function() {
                        if (!this.currentItem) return false;
                        return this.getRowIndex0(this.currentItem) > 0;
                    },
                    isNextEnabled: function() {
                        if (!this.currentItem) return false;
                        var length0 = this.items.length - 1;
                        return this.getRowIndex0(this.currentItem) < length0;
                    },
                    isSaveEnabled: function() {
                        return !this.nomenclatureHasError && !this.uomHasError && !this.factorHasError;
                    },
                    isFactorCEnabled: function() {
                        if (!this.selectedNomenclature || !this.selectedUom || this.factor === 'n') return false;
                        return true;
                    },
                    isFactorNEnabled: function() {
                        if (!this.selectedNomenclature || !this.selectedUom || this.factor === 'c') return false;
                        return true;
                    },
                    nomenclatureHasError: function() {
                        return !this.selectedNomenclature;
                    },
                    uomHasError: function() {
                        return !this.selectedUom || this.selectedUom === this.uomAutocomplete;
                    },
                    factorHasError: function() {
                        if (!this.currentItem) return false;
                        var common = this.currentItem.commonFactor;
                        var nomenclature = this.currentItem.nomenclatureFactor;
                        if (common <= 0 && nomenclature <= 0) return true;
                        return false;
                    },
                    selectedNomenclatureUom: function() {
                        if (this.selectedNomenclature) {
                            return this.selectedNomenclature.batchUomName;
                        }
                        return '';
                    },
                    nomenclatureClass: function() { return getInputClass(this.nomenclatureHasError); },
                    uomClass: function() { return getInputClass(this.uomHasError); },
                    factorErrorClass: function() { return getInputClass(this.factorHasError); },
                    isQuotationRequestAvailable: function() {
                        var vm = this;
                        if (this.items.length === 0) return false;
                        return _.every(this.items, function(i) { return vm.isMatched(i); });
                    }
                },
                methods: {
                    error: function(text) {
                        var msg = '';
                        if (text) {
                            msg = text;
                        } else {
                            msg = 'Что-то пошло не так. Обратитесь к администратору';
                        }
                        this.$notify({
                            type: 'danger',
                            title: 'Ошибка!',
                            content: msg
                        });
                    },
                    loadData: function() {
                        var vm = this;
                        this.$http.get('@Url.Action("MatchItemsData", new {id = Model.Id})').then(function(res) {
                            var dataRes = res.body;
                            vm.items = dataRes.items;
                            vm.currentItem = vm.items[0];
                            vm.customerName = dataRes.customerName;
                            vm.customerId = dataRes.customerId;
                        },
                        function(res) {

                        });
                    },
                    getRowIndex0: function(item) {
                        return this.items.indexOf(item);
                    },
                    getRowIndex0ById: function(itemId) {
                        return _.findIndex(this.items, function(item){ return item.id === itemId; });
                        //return this.getRowIndex0(item);
                    },
                    getRowIndex: function(item) {
                        return this.getRowIndex0(item) + 1;
                    },
                    isMatched: function(item) {
                        return item.nomenclatureId &&
                            item.rawUomMatchId &&
                            (item.nomenclatureFactor > 0 || item.commonFactor > 0);
                    },
                    openMatch: function(item) {
                        this.currentItem = item;
                        this.matchModal = true;
                        this.loadMatch();
                    },
                    closeMatch: function() {
                        this.matchModal = false;
                    },
                    openCreate: function(item) {
                        this.currentItem = item;
                        this.createModal = true;
                    },
                    closeCreate: function() {
                        this.createModal = false;
                    },
                    nomenclatureCreated: function(data) {
                        var vm = this;
                        var index = vm.getRowIndex0ById(data.itemId); 
                        
                        vm.items[index].nomenclatureId = data.nomId;
                        vm.items[index].nomenclatureName = data.nomName;
                        vm.items[index].nomenclatureCode = data.nomCode;
                        vm.items[index].commonFactor = 1;
                        vm.items[index].rawUomMatchId = data.uomId;
                        vm.items[index].nomenclatureUom = data.uomName;
                        //vm.items[index].nomenclatureUom = vm.selectedNomenclature.batchUomName;
                        //vm.items[index].rawUomMatchId = vm.selectedUom.id;

                    },
                    loadMatch: function() {
                        if (this.currentItem.nomenclatureId) {
                            this.loadNomenclature(this.currentItem.nomenclatureId);
                        } else {
                            //this.nomenclatureAutocomplete = '';
                            this.selectedNomenclature = null;
                        }
                        if (this.currentItem.rawUomMatchId) {
                            this.loadUom(this.currentItem.rawUomMatchId);
                        } else {
                            //this.uomAutocomplete = this.currentItem.rawUom;
                            this.selectedUom = null;
                        }
                    },
                    prevMatch: function() {
                        var index = this.getRowIndex0(this.currentItem);
                        this.currentItem = this.items[index - 1];
                        this.loadMatch();
                    },
                    nextMatch: function() {
                        var index = this.getRowIndex0(this.currentItem);
                        this.currentItem = this.items[index + 1];
                        this.loadMatch();
                    },
                    saveMatch: function() {
                        var vm = this;
                        var data = {
                            itemId: vm.currentItem.id,
                            nomenclatureId: vm.selectedNomenclature.id,
                            uomId: vm.selectedUom.id,
                            factorC: vm.factor === 'c' ? vm.currentItem.commonFactor : 0,
                            factorN: vm.factor === 'n' ? vm.currentItem.nomenclatureFactor : 0,
                            customerId: vm.customerId
                        };
                        this.$http.post('@Url.Action("SaveMatchItem")', data).then(function(res) {
                            var index = vm.getRowIndex0(vm.currentItem);
                            vm.items[index].nomenclatureId = vm.selectedNomenclature.id;
                            vm.items[index].nomenclatureName = vm.selectedNomenclature.name;
                            vm.items[index].nomenclatureCode = vm.selectedNomenclature.code;
                            vm.items[index].nomenclatureUom = vm.selectedNomenclature.batchUomName;
                            vm.items[index].rawUomMatchId = vm.selectedUom.id;
                        },
                        function(res) {
                            vm.error();
                        });
                    },
                    loadNomenclature: function(id) {
                        var vm = this;
                        this.$http.get('@Url.Action("AutocompleteSingle", "Nomenclature")' + '?id=' + id).then( function(res) {
                            var dataRes = res.body;
                            if (dataRes.isSuccess) {
                                vm.selectedNomenclature = dataRes.data;
                                //vm.nomenclatureAutocomplete = dataRes.data.name;
                            } else {
                                vm.error();
                            }
                        },
                        function(res) {
                            vm.error();
                        });
                    },
                    loadUom: function(id) {
                        var vm = this;
                        this.$http.get('@Url.Action("AutocompleteSingle", "Uom")' + '?id=' + id).then(function(res) {
                            var dataRes = res.body;
                            if (dataRes.isSuccess) {
                                vm.selectedUom = dataRes.data;
                                //vm.uomAutocomplete = dataRes.data.name;
                            } else {
                                vm.error();
                            }
                        },
                        function(res) {
                            vm.error();
                        });
                    },
                    loadFactor: _.debounce(function(e) {
                        var vm = this;
                        if (!vm.nomenclatureHasError && !vm.uomHasError) {
                            var from = vm.selectedUom.id;
                            var to = vm.selectedNomenclature.batchUomId;
                            var nom = vm.selectedNomenclature.id;
                            var customerId = vm.customerId;
                            vm.$http.post('@Url.Action("Factor", "Uom")', { from, to, nom, customerId }).then(
                                function(res) {
                                    var dataRes = res.body;
                                    vm.currentItem.commonFactor = dataRes.commonFactor;
                                    vm.currentItem.nomenclatureFactor = dataRes.nomenclatureFactor;
                                    if (dataRes.nomenclatureFactor > 0) {
                                        vm.factor = 'n';
                                    } else {
                                        vm.factor = 'c';
                                    }
                                },
                                function(res) {
                                    vm.error();
                                });
                        } else {
                            vm.factor = 'c';
                        }
                    }, 300),
                    createAll: function() {
                        var vm = this;
                        var postData = {
                            id: vm.prId
                        }
                        vm.$http.post('@Url.Action("CreateAndSaveAll")', postData).then(function(res) {
                            var data = res.body;
                            if (data.isSuccess) {
                                vm.loadData();
                            } else {
                                vm.error(data.message);
                            }
                        }, function(res) {
                            vm.error();
                        });
                    }
                }
            });
        })();
    </script>
}
