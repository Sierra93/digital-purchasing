@using DigitalPurchasing.Web.Controllers
@model object

@{
    ViewData["Title"] = "Наименования материалов";
}

<h2 class="with-button">@ViewBag.Title</h2>
<div class="btn-group">
    <a asp-action="Create" class="btn btn-default">Создать</a>
    <a asp-action="Template" class="btn btn-default">Скачать шаблон</a>
    <form method="post" enctype="multipart/form-data" asp-action="UploadTemplate" asp-controller="Nomenclature" class="btn btn-default btn-file">
        <label>
            Загрузить заполненный шаблон
            <input type="file" style="display: none;" name="file">
        </label>
    </form>
    <a asp-action="TemplateWithAlternatives" class="btn btn-default">Выгрузить аналоги</a>
    <form method="post" enctype="multipart/form-data" asp-action="UploadTemplateWithAlternatives" asp-controller="Nomenclature" class="btn btn-default btn-file">
        <label>
            Загрузить аналоги
            <input type="file" style="display: none;" name="file">
        </label>
    </form>
</div>

<partial name="_AlertDanger" for="@TempData["ErrorMessage"]" />

<div id="app">
    <div class="row" style="margin-bottom: 10px">
        <div class="col-xs-12 col-sm-8 col-md-6 col-lg-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Поиск" v-model="search">
                <span class="input-group-btn">
                    <button class="btn btn-default" type="button" v-on:click="resetSearch">x</button>
                </span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <vuetable ref="vuetable"
                      api-url="@Url.Action(nameof(NomenclatureController.Data))"
                      :per-page="20"
                      :fields="fields"
                      :sort-order="sortOrder"
                      :query-params="getQueryParams"
                      pagination-path=""
                      detail-row-component="row-details"
                      no-data-template="Нет данных"
                      :css="css"
                      @@vuetable:pagination-data="onPaginationData"
                      @@vuetable:load-success="onTableLoaded"
                      @@vuetable:cell-clicked="onCellClicked">
                <div slot="slot-actions" slot-scope="props">
                    <div class="btn-group" role="group" aria-label="...">
                        <a class="btn btn-default" :href="props.rowData.editUrl"><i class="far fa-edit"></i></a>
                        <button type="button" class="btn btn-default" @@click="deleteRow(props.rowData, props.rowIndex)"><i class="far fa-trash-alt"></i></button>
                    </div>
                </div>
            </vuetable>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <vuetable-pagination-info ref="paginationInfo"
                                      info-template="Показано с {from} по {to} из {total}"
                                      no-data-template="Нет данных"
                                      info-class="pull-left"
                                      :css="css.pagination">
            </vuetable-pagination-info>
            <vuetable-pagination ref="pagination"
                                 :css="css.pagination"
                                 @@vuetable-pagination:change-page="onChangePage">
            </vuetable-pagination>
        </div>
    </div>
    <modal v-model="modalDelete" title="Удаление">
        <p>Вы уверены что хотите удалить "<b>{{modalData.name}}</b>"?<br/>Это действие нельзя отменить.</p>
        <div slot="footer">
            <button v-on:click="deleteOk" class="btn btn-danger">Удалить</button>
            <button v-on:click="deleteCancel" class="btn btn-default">Отмена</button>
        </div>
    </modal>
</div>

<template id="row-details">
    <div>
        <vuetable ref="vuetableDetails"
                  :api-url="getDetailsUrl"
                  :query-params="getQueryParams"
                  :fields="fields"
                  :sort-order="sortOrder"
                  pagination-path=""
                  :css="css"
                  @@vuetable:pagination-data="onDetailsPaginationData"
                  no-data-template="Нет данных">
            <div slot="slot-actions" slot-scope="props">
                <div class="btn-group" role="group" aria-label="...">
                    <a class="btn btn-default" :href="props.rowData.editUrl"><i class="far fa-edit"></i></a>
                    <button type="button" class="btn btn-default" @@click="deleteRow(props.rowData, props.rowIndex)"><i class="far fa-trash-alt"></i></button>
                </div>
            </div>
        </vuetable>
        <div>
            <vuetable-pagination-info ref="detailsPaginationInfo"
                                      info-class="pull-left"
                                      :css="css.pagination">
            </vuetable-pagination-info>
            <vuetable-pagination ref="detailsPagination"
                                 :css="css.pagination"
                                 @@vuetable-pagination:change-page="onDetailsChangePage">
            </vuetable-pagination>
        </div>
        <modal v-model="modalDelete" title="Удаление">
            <p>Вы уверены что хотите удалить "<b>{{modalData.name}}</b>"?<br />Это действие нельзя отменить.</p>
            <div slot="footer">
                <button v-on:click="deleteOk" class="btn btn-danger">Удалить</button>
                <button v-on:click="deleteCancel" class="btn btn-default">Отмена</button>
            </div>
        </modal>
    </div>
</template>

@section Scripts {
    <script>
        $(document).on('change', ':file', function () {
            $(this).parents('form').submit();
        });
    </script>
    <script>
        (function () {
            Vue.use(Vuetable);

            Vue.component('row-details', {
                props: {
                    rowData: {
                        type: Object,
                        required: true
                    },
                    rowIndex: {
                        type: Number
                    }
                },
                template: '#row-details',
                data: function() {
                    return {
                        css: cssTable,
                        fields: [
                            {
                                title: 'Тип',
                                name: 'clientType',
                                sortField: 'ClientType',
                                formatter: this.formatClientType
                            },
                            {
                                title: 'Название организации',
                                name: 'clientName',
                                sortField: 'ClientName'
                            },
                            {
                                title: 'Код',
                                name: 'code',
                                sortField: 'Code'
                            },
                            {
                                title: 'Наименование',
                                name: 'name',
                                sortField: 'Name'
                            },
                            {
                                title: 'ЕИ',
                                name: 'batchUomName',
                                sortField: 'BatchUom.Name'
                            },
                            {
                                title: 'ЕИ массы',
                                name: 'massUomName',
                                sortField: 'MassUom.Name'
                            },
                            {
                                title: 'Масса 1 ЕИ, ЕИ массы',
                                name: 'massUomValue',
                                sortField: 'MassUomValue'
                            },
                            {
                                title: 'ЕИ массы',
                                name: 'massUomName',
                                sortField: 'MassUom.Name'
                            },
                            {
                                title: 'Масса 1 ЕИ, ЕИ массы',
                                name: 'massUomValue',
                                sortField: 'MassUomValue'
                            },
                            {
                                title: 'Название ресурса',
                                name: 'resourceUomName',
                                sortField: 'ResourceUom.Name'
                            },
                            {
                                title: 'Ресурс, 1 ЕИ ресурса',
                                name: 'resourceUomValue',
                                sortField: 'ResourceUomValue'
                            },
                            {
                                title: 'ЕИ ресурса',
                                name: 'resourceBatchUomName',
                                sortField: 'ResourceBatchUom.Name'
                            },
                            {
                                title: 'Количество товара в упаковке, ЕИ товара в упаковке',
                                name: 'packUomValue',
                                sortField: 'PackUomValue'
                            },
                            {
                                title: 'ЕИ товара в упаковке',
                                name: 'packUomName',
                                sortField: 'PackUom.Name'
                            },
                            {
                                name: 'slot-actions',
                                title: 'Действия',
                                titleClass: 'text-center',
                                dataClass: 'text-center'
                            }
                        ],
                        sortOrder: [
                            {
                                field: 'name',
                                direction: 'asc'
                            }
                        ],
                        modalDelete: false,
                        modalData: {
                            name: '',
                            id: null
                        }
                    };
                },
                methods: {
                    formatClientType: function(value) {
                        return value === 0 ? 'Клиент' : 'Поставщик';
                    },
                    onDetailsChangePage: function (page) {
                        this.$refs.vuetableDetails.changePage(page);
                    },
                    onDetailsPaginationData: function (paginationData) {
                        this.$refs.detailsPagination.setPaginationData(paginationData);
                        this.$refs.detailsPaginationInfo.setPaginationData(paginationData);
                    },
                    deleteRow: function (rowData, rowIndex) {
                        this.modalData.name = rowData.name;
                        this.modalData.id = rowData.id;
                        this.modalDelete = true;
                    },
                    deleteOk: function(id) {
                        var $this = this;
                        this.$http.post('@Url.Action("Delete")', { id: $this.modalData.id }).then(function(res) {
                            $this.$refs.vuetableDetails.refresh();
                            $this.modalDelete = false;
                        }, function(res) {
                            alert('Ошибка удаления');
                        });
                    },
                    deleteCancel: function() {
                        this.modalDelete = false;
                    },
                    getQueryParams: function (sortOrder, currentPage, perPage) {
                        var sortBySearch = this.rowData._search;
                        this.rowData._search = null;
                        return {
                            'sort': sortOrder[0].field + '|' + sortOrder[0].direction,
                            'page': currentPage,
                            'per_page': perPage,
                            sortBySearch: sortBySearch
                        };
                    }
                },
                computed: {
                    getDetailsUrl: function () {
                        return '/nomenclature/detailsdata/' + this.rowData.id;
                    }
                },
            });

            window.app = new Vue({
                el: '#app',
                data: function () {
                    return {
                        css: cssTable,
                        fields: [
                            //{
                            //    title: 'Категория',
                            //    name: 'categoryName',
                            //    sortField: 'Category.Name'
                            //},
                            {
                                title: 'Категория',
                                name: 'categoryFullName',
                                sortField: 'Category.Name'
                            },
                            {
                                title: 'Код',
                                name: 'code',
                                sortField: 'Code'
                            },
                            {
                                title: 'Наименование',
                                name: 'name',
                                sortField: 'Name'
                            },
                            {
                                title: 'Наименование (eng)',
                                name: 'nameEng',
                                sortField: 'NameEng'
                            },
                            {
                                title: 'ЕИ',
                                name: 'batchUomName',
                                sortField: 'BatchUom.Name'
                            },
                            {
                                title: 'ЕИ массы',
                                name: 'massUomName',
                                sortField: 'MassUom.Name'
                            },
                            {
                                title: 'Масса 1 ЕИ, ЕИ массы',
                                name: 'massUomValue',
                                sortField: 'MassUomValue'
                            },
                            {
                                title: 'Количество товара в упаковке, ЕИ товара в упаковке',
                                name: 'packUomValue',
                                sortField: 'PackUomValue'
                            },
                            {
                                title: 'ЕИ товара в упаковке',
                                name: 'packUomName',
                                sortField: 'PackUom.Name'
                            },
                            {
                                title: 'Название ресурса',
                                name: 'resourceUomName',
                                sortField: 'ResourceUom.Name'
                            },
                            {
                                title: 'Ресурс, 1 ЕИ ресурса',
                                name: 'resourceUomValue',
                                sortField: 'ResourceUomValue'
                            },
                            {
                                title: 'ЕИ ресурса',
                                name: 'resourceBatchUomName',
                                sortField: 'ResourceBatchUom.Name'
                            },
                            {
                                name: 'slot-actions',
                                title: 'Действия',
                                titleClass: 'text-center',
                                dataClass: 'text-center'
                            }
                        ],
                        sortOrder: [
                            {
                                field: 'name',
                                direction: 'asc'
                            }
                        ],
                        search: null,
                        modalDelete: false,
                        modalData: {
                            name: '',
                            id: null
                        }
                    };
                },
                watch: {
                    search: _.debounce(function () {
                        this.$refs.vuetable.refresh();
                    }, 250)
                },
                methods: {
                    onPaginationData: function (paginationData) {
                        this.$refs.pagination.setPaginationData(paginationData);
                        this.$refs.paginationInfo.setPaginationData(paginationData);
                    },
                    onChangePage: function (page) {
                        this.$refs.vuetable.changePage(page);
                    },
                    onCellClicked: function (dataItem, field, event) {
                        this.$refs.vuetable.toggleDetailRow(dataItem.data.id);
                    },
                    onTableLoaded: function (payload) {
                        var vm = this;
                        var noms = payload.data.data;
                        _.each(noms, function (n) {
                            n._search = vm.search;
                            if (n.hasAlternativeWithRequiredName) {
                                if (vm.$refs.vuetable.isVisibleDetailRow(n.id)) {
                                    vm.$refs.vuetable.hideDetailRow(n.id);
                                    // Add timeout. Otherwise details row not refresh sometimes
                                    setTimeout(function () {
                                        vm.$refs.vuetable.showDetailRow(n.id);
                                    }, 100)
                                } else {
                                    vm.$refs.vuetable.showDetailRow(n.id);
                                }
                            }
                        });
                    },
                    deleteRow: function (rowData, rowIndex) {
                        this.modalData.name = rowData.name;
                        this.modalData.id = rowData.id;
                        this.modalDelete = true;
                    },
                    deleteOk: function(id) {
                        var $this = this;
                        this.$http.post('@Url.Action("Delete")', { id: $this.modalData.id }).then(function(res) {
                            $this.$refs.vuetable.refresh();
                            $this.modalDelete = false;
                        }, function(res) {
                            alert('Ошибка удаления');
                        });
                    },
                    deleteCancel: function() {
                        this.modalDelete = false;
                    },
                    getQueryParams (sortOrder, currentPage, perPage) {
                        return {
                            'sort': sortOrder[0].field + '|' + sortOrder[0].direction,
                            'page': currentPage,
                            'per_page': perPage,
                            's': this.search
                        };
                    },
                    resetSearch: function() {
                        this.search = null;
                    }
                }
            });
        })();
    </script>
}
