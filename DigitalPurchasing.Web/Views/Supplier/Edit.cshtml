@using DigitalPurchasing.Core.Extensions
@using DigitalPurchasing.Core.Interfaces
@model DigitalPurchasing.Web.ViewModels.Supplier.SupplierEditVm

@{
    ViewData["Title"] = Model.Supplier.Name + " - Поставщики";

    bool isCreateMode = Model.Supplier?.Id == default;

    string GetCatNameInHierarchy(NomenclatureCategoryVm category)
    {
        if (category.ParentId.HasValue)
        {
            string categoryName = category.IsDeleted ? "[Удалена]" : category.Name;
            var parentCategory = Model.AvailableCategories.First(_ => _.Id == category.ParentId.Value);
            return $"{GetCatNameInHierarchy(parentCategory)} > {categoryName}";
        }

        return category.Name;
    }
}

<h2 class="with-button">@ViewData["Title"]</h2>
<hr />
<form asp-action="Edit">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="Supplier.Id" />
    <partial name="_FormFields" model="Model" />
    <div class="form-group">
        <input type="submit" class="btn btn-primary" value="Сохранить" />
        <a asp-action="Index" class="btn btn-default">Отмена</a>
    </div>
</form>

<hr />

<div id="categories">
    <h3 class="with-button">Категории закупок</h3>
    <div class="btn-group">
        <a class="btn btn-default" v-on:click="addCategory">Добавить</a>
        <a class="btn btn-default" v-on:click="saveCategories">Сохранить</a>
    </div>
    <table class="table table-striped">
        <tr>
            <th>Категория</th>
            <th style="width: 250px">Контакт 1</th>
            <th style="width: 250px">Контакт 2</th>
        </tr>
        <tr v-for="category in orderedCategories">
            <td v-if="category.isDefault">
                <span>Основная</span>&nbsp;
                <select class="form-control" v-model="category.id" style="max-width:500px; display: inline-block">
                    <option value="null">-- Не выбрана --</option>
                    <option v-for="option in orderedAvailableCategories" v-bind:value="option.id">{{option.name}}</option>
                </select>&nbsp;
                <button class="btn btn-default btn-sm" v-on:click="removeCategory(category)">
                    <i class="fas fa-times"></i>
                </button>
            </td>
            <td v-else>
                <span>{{category.name}}</span>
            </td>
            <td>
                <select class="form-control" v-model="category.primaryContactId">
                    <option value="null">-- Не выбран --</option>
                    <option v-for="option in contactPersons" v-bind:value="option.id">{{option.name}}</option>
                </select>
            </td>
            <td>
                <select class="form-control" v-model="category.secondaryContactId">
                    <option value="null">-- Не выбран --</option>
                    <option v-for="option in contactPersons" v-bind:value="option.id">{{option.name}}</option>
                </select>
            </td>
        </tr>
    </table>
</div>

<hr />

<div>
    <h3 class="with-button">Контакты сотрудников</h3>
    <div class="btn-group">
        <a class="btn btn-default" asp-action="AddContactPerson" asp-route-supplierId="@Model.Supplier.Id">Добавить</a>
    </div>
    @if (Model.ContactPersons.Any())
    {
        <div class="row" id="table-persons">
            <div class="col-md-12">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Должность</th>
                            <th>Фамилия</th>
                            <th>Имя</th>
                            <th>Отчество</th>
                            <th>E-mail</th>
                            <th>Телефон</th>
                            <th>Моб. телефон</th>
                            <th>Использовать для<br />отправки запросов и<br />получения КП?</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var person in Model.ContactPersons)
                        {
                            <tr data-fullname="@person.FullName" data-id="@person.Id">
                                <td>@person.JobTitle</td>
                                <td>@person.LastName</td>
                                <td>@person.FirstName</td>
                                <td>@person.Patronymic</td>
                                <td>@person.Email</td>
                                <td>@person.PhoneNumber.FormatPhoneNumber()</td>
                                <td>@person.MobilePhoneNumber.FormatPhoneNumber()</td>
                                <td>@(person.UseForRequests ? "Да" : "Нет")</td>
                                <td>
                                    <a asp-action="EditContactPerson" asp-route-personId="@person.Id"><i class="far fa-edit"></i></a>
                                    <button type="button" class="btn btn-link" data-delete-person><i class="far fa-trash-alt"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modal-delete-person">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Удаление контакта</h4>
            </div>
            <div class="modal-body">
                <p>Вы действительно хотите удалить контакт "<b><span data-fullname></span></b>"?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" data-delete-id>Удалить</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        (function() {
            $(document).ready(function() {
                var $tablePersons = $('#table-persons');
                var $modalDelete = $('#modal-delete-person');
                $tablePersons.find('button[data-delete-person]').click(function() {
                    var $this = $(this);
                    var $tr = $this.parents('tr');
                    var data = $tr.data();
                    $modalDelete.find('[data-fullname]').text(data.fullname);
                    $modalDelete.find('[data-delete-id]').attr('data-delete-id', data.id);
                    $modalDelete.modal('show');
                });
                $modalDelete.on('click', 'button[data-delete-id]', function() {
                    var id = $(this).attr('data-delete-id');
                    axios.post('@Url.Action("DeleteContactPerson")', { id: id }).then(function (res) {
                            $tablePersons.find('tbody tr[data-id="' + id + '"]').remove();
                            if ($tablePersons.find('tbody tr').length === 0) {
                                $tablePersons.remove();
                            }
                            $modalDelete.modal('hide');
                        })
                        .catch(function (error) {
                            alert('Ошибка');
                        });
                });
            });
        })();
    </script>
    <script>
        var categories = new Vue({
            el: '#categories',
            data: function() {
                return {
                    availableCategories: [],
                    contactPersons: [],
                    categories: []
                }
            },
            created: function () {
                var vm = this;
                this.$http.get('@Url.Action("CategoriesData", new { supplierId = Model.Supplier.Id })').then(response => {
                    var data = response.body;
                    vm.availableCategories = data.availableCategories;
                    vm.contactPersons = data.contactPersons;
                    vm.categories = data.categories;
                }, response => {
                    vm.error();
                });
            },
            computed: {
                orderedCategories: function() {
                    return _.orderBy(this.categories, ['isDefault'], ['desc']);
                },
                orderedAvailableCategories: function() {
                    return _.orderBy(this.availableCategories, ['name'], ['asc']);
                }
            },
            methods: {
                error: function(text) {
                    var msg = '';
                    if (text) {
                        msg = text;
                    } else {
                        msg = 'Что-то пошло не так. Обратитесь к администратору';
                    }
                    this.$notify({
                        type: 'danger',
                        title: 'Ошибка!',
                        content: msg
                    });
                },
                addCategory: function() {
                    var vm = this;
                    vm.categories.push({
                        id: null,
                        primaryContactId: null,
                        secondaryContactId: null,
                        isDefault: true
                    });
                },
                removeCategory: function(item) {
                    var vm = this;
                    vm.categories.splice(vm.categories.indexOf(item), 1);
                },
                saveCategories: function() {
                    var vm = this;
                    var categories = _.map(vm.categories, function(item) {
                        if (item.primaryContactId === 'null') {
                            item.primaryContactId = null;
                        }
                        if (item.secondaryContactId === 'null') {
                            item.secondaryContactId = null;
                        }
                        return item;
                    });
                    this.$http.post('@Url.Action("SaveCategories", new { supplierId = Model.Supplier.Id })', categories).then(response => {
                        var data = response.body;
                        vm.availableCategories = data.availableCategories;
                        vm.contactPersons = data.contactPersons;
                        vm.categories = data.categories;
                        vm.$notify({
                            type: 'success',
                            title: 'Сохранение категорий',
                            content: 'Категории успешно сохранены'
                        });
                    }, response => {
                        vm.error();
                    });
                }
            }
        });
    </script>
}

