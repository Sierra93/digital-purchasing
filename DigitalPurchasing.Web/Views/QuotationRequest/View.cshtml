@model DigitalPurchasing.Core.Interfaces.QuotationRequestVm

@{
    ViewBag.Title = $"Запрос коммерческого предложения № {Model.PublicId} от {Model.CreatedOn:dd.MM.yyyy HH:mm}";
    Layout = "_Layout";
}

<h2>@ViewBag.Title</h2>

<div id="app">
    <div class="row">
        <div class="col-md-6 form-inline">
            <div class="form-group">
                <label>Номенклатура предприятия:&nbsp;</label>
                <select v-model="selectedCompany" class="form-control">
                    <option v-bind:value="keys[0]">{{keys[0]}}</option>
                    <option v-bind:value="keys[1]">{{keys[1]}}</option>
                </select>
            </div>
        </div>
        <div class="col-md-6">
            <a asp-action="Download" asp-route-qrId="@Model.Id" class="btn btn-primary">Скачать в формате excel</a>
            <a asp-controller="CompetitionList" asp-action="Create" asp-route-qrId="@Model.Id" class="btn btn-primary">Создать КЛ</a>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <td>Код</td>
                        <td>Название</td>
                        <td>Кол-во</td>
                        <td>ЕИ</td>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item in selectedItems">
                        <td>{{item.code}}</td>
                        <td>{{item.name}}</td>
                        <td>{{item.qty | decimal}}</td>
                        <td>{{item.uom}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <address-form v-bind:qr="qrId"></address-form>
        </div>
        <div class="col-md-6">
            <div class="form-horizontal">
                <div class="form-group">
                    <label>Поставщики, кому будет отправлен запрос коммерческого предложения</label>
                </div>
                <div class="form-group" v-for="(supplier, index) in suppliers">
                    <div class="input-group">
                        <span class="input-group-addon">{{(index+1)}}.</span>
                        <input type="text" class="form-control" placeholder="" v-model.trim="supplier.name" v-bind:id="('supplier-'+index)">
                        <typeahead v-model="supplier.autocomplete" force-select force-clear v-bind:target="('#supplier-'+index)" async-src="@Url.Action("Autocomplete", "Supplier")?q=" async-key="items" item-key="name"></typeahead>
                        <span class="input-group-btn">
                            <button class="btn btn-default" type="button" v-on:click="removeSupplier(supplier)"><i class="far fa-trash-alt"></i></button>
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-default" v-on:click="addSupplier">Добавить поставщика</button>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" v-on:click="sendEmailsToSupplier" :disabled="!canSendEmails">{{sendEmailsText}}</button>
                </div>
                <div class="form-group" v-if="orderedRequests.length > 0">
                    <label>Отправленные запросы:</label>
                </div>
                <div class="form-group" v-if="orderedRequests.length > 0">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Дата и время отправки</th>
                                <th>Поставщик</th>
                                <th>Сотрудник</th>
                                <th>E-mail</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="req in orderedRequests">
                                <td>{{req.createdOn | formatDateTime}}</td>
                                <td>{{req.supplierName}}</td>
                                <td>{{req.personFullName}}</td>
                                <td>{{req.email}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <modal v-model="modalSendEmails" title="Запрос КП">
        <p>Запрос коммерческого предложения отправлен.</p>
        <div slot="footer">
            <button v-on:click="modalSendEmailsOk" class="btn btn-primary">ОК</button>
        </div>
    </modal>
    // 
</div>

@section Scripts
{
    <partial name="~/Views/Shared/Delivery/_AddressFormComponent.cshtml" />
    <script>
        (function() {
            var app = new Vue({
                el: '#app',
                data: function() {
                    return {
                        qrId: '@Model.Id',
                        items: [],
                        requests: [],
                        selectedCompany: '',
                        suppliers: [],
                        sendingInProgress: false,
                        modalSendEmails: false
                    };
                },
                created: function() {
                    this.load();
                },
                computed: {
                    keys: function() {
                        return Object.keys(this.items);
                    },
                    selectedItems: function() {
                        return this.items[this.selectedCompany];
                    },
                    canSendEmails: function() {
                        return !this.sendingInProgress && this.suppliersIds.length > 0;
                    },
                    suppliersIds: function() {
                        var validSuppliers = _.filter(this.suppliers, function(supplier) {
                            if (supplier) {
                                return supplier.autocomplete;
                            }
                            return false;
                        });

                        var ids = _.map(validSuppliers, function (supplier) {
                            return supplier.autocomplete.id;
                        });

                        return _.uniq(ids);
                    },
                    sendEmailsText: function() {
                        return this.sendingInProgress ? 'Отправка...' : 'Отправить запрос КП';
                    },
                    orderedRequests: function() {
                        return _.orderBy(this.requests, function(e) {
                            return new Date(e.createdOn);
                        }, ['desc']);
                    }
                },
                watch: {
                    suppliers: {
                        handler: function(newSuppliers) {
                            _.forEach(newSuppliers, function(supplier) {
                                if (supplier && supplier.autocomplete && supplier.autocomplete.name) {
                                    supplier.name = supplier.autocomplete.name;
                                } else {
                                    supplier.name = null;
                                }
                            });
                        },
                        deep: true 
                    }
                },
                filters: {
                    decimal: function (value) {
                        return parseFloat(value).toFixed(4);
                    },
                    formatDateTime: function(value) {
                        if (value) {
                            return moment(String(value)).format('DD.MM.YYYY HH:mm');
                        }
                        return value;
                    }
                },
                methods: {
                    load: function() {
                        this.$http.get('@Url.Action("ViewDData")?qrId=' + this.qrId).then(function(res) {
                            this.items = res.data.items;
                            this.requests = res.data.sentRequests;
                            this.selectedCompany = this.keys[0];
                        }, function(res) {

                        });
                    },
                    fixSuppliersNames: function() {
                        _.each(this.suppliers, function(supplier) {
                            if (supplier && supplier.autocomplete) {
                                supplier.name = supplier.autocomplete.name;
                            }
                        });
                    },
                    addSupplier: function() {
                        var vm = this;
                        vm.suppliers.push({
                            autocomplete: null,
                            name: null
                        });
                        vm.fixSuppliersNames();
                    },
                    removeSupplier: function(supplier) {
                        var vm = this;
                        vm.suppliers.splice(vm.suppliers.indexOf(supplier), 1);
                        vm.fixSuppliersNames();
                    },
                    sendEmailsToSupplier: function() {
                        var vm = this;
                        vm.sendingInProgress = true;
                        vm.$http
                            .post('@Url.Action("SentRequests")', { id: vm.qrId, suppliers: vm.suppliersIds })
                            .then(function(res) {
                                var data = res.data;
                                vm.requests = data;
                                //console.info(data);
                                vm.sendingInProgress = false;
                                vm.modalSendEmails = true;
                            }, function (res) {
                                vm.sendingInProgress = false;
                                alert('error');
                            });
                    },
                    modalSendEmailsOk: function() {
                        this.modalSendEmails = false;
                    }
                }
            });
        })();
    </script>
}
