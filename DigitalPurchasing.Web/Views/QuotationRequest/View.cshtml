@model DigitalPurchasing.Core.Interfaces.QuotationRequestVm
@using DigitalPurchasing.Web.Controllers

@{
    ViewBag.Title = $"Запрос коммерческого предложения № {Model.PublicId} от {User.ToLocalTime(Model.CreatedOn):dd.MM.yyyy HH:mm}";
    Layout = "_Layout";
}

<h2 class="with-button">@ViewBag.Title</h2>
<div class="btn-group">
    <a asp-action="Download" asp-route-qrId="@Model.Id" class="btn btn-default">Скачать в формате excel</a>
    <a asp-controller="CompetitionList" asp-action="Create" asp-route-qrId="@Model.Id" class="btn btn-primary">Создать КЛ</a>
</div>
<p class="h4">Клиент: @Model.PurchaseRequest.Customer.Name</p>
<p class="h4">Заявка № @Model.PurchaseRequest.PublicId от @Model.PurchaseRequest.CreatedOn.ToString("dd.MM.yyyy HH:mm")</p>
@if (!string.IsNullOrEmpty(Model.PurchaseRequest.ErpCode))
{
    <p class="h4">Номер заявки в ERP - @Model.PurchaseRequest.ErpCode</p>
}
<div id="app">
    <div class="row">
        <div class="col-md-6 form-inline">
            <div class="form-group">
                <label>Номенклатура предприятия:&nbsp;</label>
                <select v-model="selectedCompany" class="form-control">
                    <option value="0">{{companyName}}</option>
                    <option value="1">{{customerName}}</option>
                </select>
            </div>
        </div>
        <div class="col-md-6"></div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Код</th>
                        <th>Название</th>
                        <th>Кол-во</th>
                        <th>ЕИ</th>
                        <th>Поставщики, кому уже отправлен запрос</th>
                        <th>Поставщики, кому будет отправлен запрос</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(item, index) in items">
                        <td>{{selectedCompany == 0 ? item.companyCode : item.customerCode}}</td>
                        <td>{{selectedCompany == 0 ? item.companyName : item.customerName }}</td>
                        <td>{{(selectedCompany == 0 ? item.companyQty : item.customerQty) | decimal}}</td>
                        <td>{{selectedCompany == 0 ? item.companyUom : item.customerUom}}</td>
                        <td>{{sentToSuppliers(item)}}</td>
                        <td>
                            <item-request v-for="request in item.requests"
                                          :key="(request.itemId+request.supplierId)"
                                          :item-id="request.itemId"
                                          :supplier-id="request.supplierId"
                                          :supplier-name="request.supplierName"
                                          v-on:remove-item="removeItemRequest">
                            </item-request>
                        </td>
                        <td>
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="" v-model.trim="item.requestName" v-bind:id="('item-request-supplier-'+index)" autocomplete="off" />
                                <span class="input-group-btn">
                                    <button class="btn btn-default" type="button" v-on:click="addItemRequest(item)">Добавить</button>
                                </span>
                            </div>
                            <typeahead v-model="item.requestAutocomplete"
                                       force-select
                                       force-clear
                                       v-bind:target="('#item-request-supplier-'+index)"
                                       async-src="@Url.Action("Autocomplete", "Supplier")?q="
                                       async-key="items"
                                       item-key="name">
                            </typeahead>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <address-form v-bind:qr="qrId"></address-form>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Поставщики, кому будет отправлен запрос коммерческого предложения</label>
            </div>
            <div>
                <div class="form-group" v-for="(supplier, index) in suppliers">
                    <div class="input-group">
                        <span class="input-group-addon">{{(index+1)}}.</span>
                        <input type="text" class="form-control" placeholder="" v-model.trim="supplier.name" v-bind:id="('supplier-'+index)" autocomplete="off" />
                        <span class="input-group-btn">
                            <button class="btn btn-default" type="button" v-on:click="removeSupplier(supplier)"><i class="far fa-trash-alt"></i></button>
                        </span>
                    </div>
                    <typeahead v-model="supplier.autocomplete" force-select force-clear v-bind:target="('#supplier-'+index)" async-src="@Url.Action("Autocomplete", "Supplier")?q=" async-key="items" item-key="name"></typeahead>
                </div>
                <div class="form-group">
                    <button class="btn btn-default" v-on:click="addSupplier">Добавить поставщика</button>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" v-on:click="sendEmailsToSupplier" :disabled="!canSendEmails">{{sendEmailsText}}</button>
                    <div>
                        <small>Для доставки запроса поставщику убедитесь, что Контакты поставщика активированы  в карточке поставщика</small>
                    </div>
                </div>
            </div>
            <div>
                <div class="form-group" v-if="orderedRequests.length > 0">
                    <label>Отправленные запросы:</label>
                </div>
                <div class="form-group" v-if="orderedRequests.length > 0">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Дата и время отправки</th>
                                <th>Поставщик</th>
                                <th>Сотрудник</th>
                                <th>E-mail</th>
                                <th>Телефон</th>
                                <th>Моб.телефон</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="req in orderedRequests">
                                <td>{{req.createdOn | formatDateTime}}</td>
                                <td>{{req.supplierName}}</td>
                                <td>{{req.personFullName}}</td>
                                <td>{{req.email}}</td>
                                <td>{{req.phoneNumber}}</td>
                                <td>{{req.mobilePhoneNumber}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <modal v-model="modalSendEmails" title="Запрос КП">
        <p>Запрос коммерческого предложения отправлен.</p>
        <div slot="footer">
            <button v-on:click="modalSendEmailsOk" class="btn btn-primary">ОК</button>
        </div>
    </modal>
</div>

@section Scripts
{
    <partial name="~/Views/Shared/Delivery/_AddressFormComponent.cshtml" />
    <script>
        (function () {
            Vue.component('item-request', {
                props: ['supplierName', 'supplierId', 'itemId'],
                template: '<div style="display: inline-block; margin-right: 10px;"><span>{{supplierName}}</span>&nbsp;<button v-on:click="$emit(\'remove-item\', itemId, supplierId)"><i class="far fa-trash-alt"></i></button></div>'
            });
            var app = new Vue({
                el: '#app',
                data: function() {
                    return {
                        qrId: '@Model.Id',
                        items: [],
                        requests: [],
                        suppliers: [],
                        selectedCompany: 0,
                        sendingInProgress: false,
                        modalSendEmails: false,
                        companyName: '',
                        customerName: ''
                    };
                },
                created: function() {
                    this.load();
                },
                computed: {
                    canSendEmails: function() {
                        return !this.sendingInProgress &&
                            (this.suppliersIds.length > 0 || this.itemsSuppliersIds.length > 0);
                    },
                    suppliersIds: function() {
                        var validSuppliers = _.filter(this.suppliers, function(supplier) {
                            if (supplier) {
                                return supplier.autocomplete;
                            }
                            return false;
                        });

                        var ids = _.map(validSuppliers, function (supplier) {
                            return supplier.autocomplete.id;
                        });

                        return _.uniq(ids);
                    },
                    itemsSuppliersIds: function () {
                        var result = [];
                        _.each(this.items, function (item) {
                            _.each(item.requests, function(req) {
                                result.push({
                                    supplierId: req.supplierId,
                                    itemId: req.itemId
                                });
                            });
                        });
                        return result;
                    },
                    sendEmailsText: function() {
                        return this.sendingInProgress ? 'Отправка...' : 'Отправить запрос КП';
                    },
                    orderedRequests: function() {
                        return _.orderBy(this.requests, function(e) {
                            return new Date(e.createdOn);
                        }, ['desc']);
                    }
                },
                watch: {
                    suppliers: {
                        handler: function (newSuppliers) {
                            _.forEach(newSuppliers, function(supplier) {
                                if (supplier && supplier.autocomplete && supplier.autocomplete.name) {
                                    supplier.name = supplier.autocomplete.name;
                                }
                            });
                        },
                        deep: true 
                    }
                },
                filters: {
                    decimal: function (value) {
                        return parseFloat(value).toFixed(4);
                    },
                    formatDateTime: function(value) {
                        if (value) {
                            return moment(String(value)).format('DD.MM.YYYY HH:mm');
                        }
                        return value;
                    }
                },
                methods: {
                    load: function () {
                        var vm = this;
                        this.$http.get('@Url.Action(nameof(QuotationRequestController.ViewDData))?qrId=' + this.qrId).then(function (res) {
                            vm.companyName = res.data.company;
                            vm.customerName = res.data.customer;
                            vm.items = _.map(res.data.items, function (item) {
                                return _.extend(item, { requests: [], requestName: null, requestAutocomplete: null });
                            });
                            vm.requests = res.data.sentRequests;
                            _.each(res.data.applicableSuppliers, function (supplier) {
                                vm.suppliers.push({
                                    autocomplete: supplier,
                                    name: supplier.name
                                });
                            });
                        }, function(res) {

                        });
                    },
                    fixSuppliersNames: function() {
                        _.each(this.suppliers, function(supplier) {
                            if (supplier && supplier.autocomplete) {
                                supplier.name = supplier.autocomplete.name;
                            }
                        });
                    },
                    addSupplier: function() {
                        var vm = this;
                        vm.suppliers.push({
                            autocomplete: null,
                            name: null
                        });
                        vm.fixSuppliersNames();
                    },
                    removeSupplier: function(supplier) {
                        var vm = this;
                        vm.suppliers.splice(vm.suppliers.indexOf(supplier), 1);
                        vm.fixSuppliersNames();
                    },
                    sendEmailsToSupplier: function() {
                        var vm = this;
                        vm.sendingInProgress = true;
                        var postData = {
                            id: vm.qrId,
                            suppliers: vm.suppliersIds,
                            itemSuppliers: vm.itemsSuppliersIds
                        };
                        vm.$http
                            .post('@Url.Action(nameof(QuotationRequestController.SentRequests))', postData)
                            .then(function(res) {
                                var data = res.data;
                                vm.requests = data;
                                vm.sendingInProgress = false;
                                vm.modalSendEmails = true;
                            }, function (res) {
                                vm.sendingInProgress = false;
                                alert('error');
                                });
                        _.each(this.items, function (item) {
                            item.requests = [];
                        });
                    },
                    modalSendEmailsOk: function() {
                        this.modalSendEmails = false;
                    },
                    sentToSuppliers: function (item) {
                        var requestsByCategory = _.filter(this.requests, function(request) {
                            return _.indexOf(request.categoryIds, item.categoryId) > -1;
                        });
                        var requestsByItem = _.filter(this.requests, function(request) {
                            return _.indexOf(request.itemIds, item.id) > -1;
                        });
                        if (requestsByCategory.length === 0 && requestsByItem.length === 0) return '';
                        var requestsByCategoryNames = _.map(requestsByCategory, 'supplierName');
                        var requestsByItemNames = _.map(requestsByItem, 'supplierName');

                        var names = _.union(requestsByCategoryNames, requestsByItemNames);

                        return _.join(names, ', ');
                    },
                    addItemRequest: function (item) {
                        if (!item.requestAutocomplete) return;

                        var index = _.findIndex(item.requests, function(r) {
                            return r.supplierId === item.requestAutocomplete.id
                                && r.itemId === item.itemId;
                        });

                        if (index > -1) return;

                        item.requests.push({
                            supplierId: item.requestAutocomplete.id,
                            supplierName: item.requestAutocomplete.name,
                            itemId: item.id
                        });

                        item.requestAutocomplete = null;
                        item.requestName = null;
                    },
                    removeItemRequest: function (itemId, supplierId) {
                        _.each(this.items, function (item) {
                            var index = _.findIndex(item.requests, function(r) {
                                return r.itemId === itemId && r.supplierId === supplierId;
                            });
                            if (index > -1) {
                                item.requests = _.slice(item.requests, index, index);
                            }
                        });
                    }
                }
            });
        })();
    </script>
}
