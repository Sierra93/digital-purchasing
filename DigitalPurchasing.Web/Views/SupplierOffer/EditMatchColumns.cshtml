@using DigitalPurchasing.Core.Enums
@using DigitalPurchasing.Core.Interfaces
@model DigitalPurchasing.Core.Interfaces.SupplierOfferVm

@{
    ViewBag.Title = $"Коммерческое предложение № {Model.PublicId} от {Model.CreatedOn:dd.MM.yyyy HH:mm}";
    Layout = "_Layout";
}

<partial name="_Header" model="@((string)ViewBag.Title, Model.CompetitionList.Id, (Guid?)null)" />

<h3>Сопоставление названия колонок из коммерческого предложения поставщика с названиями колонок системы</h3>
<div id="app">
    <div class="row">
        <div class="col-md-4">
            <div class="form-group" v-bind:class="supplierNameClass">
                <label>Поставщик</label>
                <input type="text" class="form-control" placeholder="" v-model.trim="supplierName" v-on:input="updateSupplierName" id="supplierName" />
                <typeahead v-model="supplierAutocomplete" target="#supplierName" :async-function="supplierAutocompleteFunc" item-key="name"></typeahead>
                <span class="help-block" v-show="supplierNameHasError">Укажите имя поставщика</span>
                <span class="help-block" v-show="isNewSupplier">Новый поставщик</span>
            </div>
        </div>
    </div>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Колонки в Системе</th>
            <th>Код</th>
            <th>Наименование</th>
            <th>ЕИ</th>
            <th>Количество</th>
            <th>Цена за 1 ЕИ</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>Колонки в Заявке</td>
            <td>
                <select class="form-control" v-model="columnCode">
                    <option v-for="option in columns" v-bind:value="option.value">{{option.text}}</option>
                </select>
            </td>
            <td>
                <select class="form-control" v-model="columnName">
                    <option v-for="option in columns" v-bind:value="option.value">{{option.text}}</option>
                </select>
            </td>
            <td>
                <select class="form-control" v-model="columnUom">
                    <option v-for="option in columns" v-bind:value="option.value">{{option.text}}</option>
                </select>
            </td>
            <td>
                <select class="form-control" v-model="columnQty">
                    <option v-for="option in columns" v-bind:value="option.value">{{option.text}}</option>
                </select>
            </td>
            <td>
                <select class="form-control" v-model="columnPrice">
                    <option v-for="option in columns" v-bind:value="option.value">{{option.text}}</option>
                </select>
            </td>
        </tr>
        </tbody>
    </table>
    <button v-on:click="saveColumns" class="btn btn-primary" v-bind:disabled="isSaveDisabled">Сохранить соответствие столбцов</button>&nbsp;
    <label v-if="isSaved">Сохранено!</label>
</div>

@if (Model.UploadedDocument.Data != null && Model.Status == SupplierOfferStatus.MatchColumns)
{
    <h3>Предложение в формате Поставщика</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                @foreach (var column in Model.ExcelTable.Columns)
                {
                <th>@column.Header</th>
                }
            </tr>
        </thead>
        <tbody>
            @{
                var rowsCount = Model.ExcelTable.Columns.Find(q => q.Type == TableColumnType.Name).Values.Count;
            }
            @for (int i = 0; i < rowsCount; i++)
            {
                <tr>
                    @foreach (var column in Model.ExcelTable.Columns)
                    {
                        <td>@column.Values[i]</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts
{
    <script>
        (function() {
            function getInputClass(hasError) {
                return {
                    'has-error': hasError,
                    'has-success': !hasError
                };
            };
            var app = new Vue({
                el: '#app',
                data: function() {
                    return {
                        id: '@Model.Id',
                        supplierName: '',
                        supplierId: null,
                        columnCode: null,
                        columnName: null,
                        columnUom: null,
                        columnQty: null,
                        columnPrice: null,
                        columns: [],
                        isSaved: false,
                        supplierAutocomplete: null,
                        saveStarted: false
                    };
                },
                created: function () {
                    var vm = this;
                    vm.$http.get('@Url.Action("ColumnsData", new { id = Model.Id })').then(function(res) {
                        var data = res.body;
                        data.columns.forEach(function(el) {
                            vm.columns.push({ text: el, value: el });
                        });
                        vm.supplierId = data.supplierId;
                        vm.supplierName = data.supplierName;
                        vm.columnCode = data.code;
                        vm.columnName = data.name;
                        vm.columnUom = data.uom;
                        vm.columnQty = data.qty;
                        vm.columnPrice = data.price;
                        vm.isSaved = data.isSaved;
                    }, function(res) {
                        alert('error');
                    });
                },
                watch: {
                    supplierAutocomplete: function(val) {
                        if (val) {
                            if (val.name) {
                                this.supplierName = val.name;
                                this.supplierId = val.id;
                            } else {
                                this.supplierName = this.supplierAutocomplete;
                                this.supplierId = null;
                            }

                        } else {
                            this.supplierName = '';
                            this.supplierId = null;
                        }
                        this.updateSupplierName();
                    }
                },
                computed: {
                    supplierNameHasError: function() {
                        if (!this.supplierName) {
                            return true;
                        }
                        return false;
                    },
                    supplierNameClass: function() {
                        return getInputClass(this.supplierNameHasError);
                    },
                    isSaveDisabled: function() {
                        return this.supplierNameHasError || this.saveStarted;
                    },
                    isNewSupplier: function() {
                        return this.supplierId === null && !this.supplierNameHasError;
                    }
                },
                methods: {
                    saveColumns: function () {
                        this.saveStarted = true;
                        var vm = this;
                        var data = {
                            soId: vm.id,
                            code: vm.columnCode,
                            name: vm.columnName,
                            uom: vm.columnUom,
                            price: vm.columnPrice,
                            qty: vm.columnQty
                        };
                        vm.$http.post('@Url.Action("SaveColumns")', data).then(function (res) {
                            vm.isSaved = true;
                            window.location.reload(true); 
                        }, function (res) {

                        });
                    },
                    supplierAutocompleteFunc (query, done) {
                        var vm = this;
                        vm.$http.get('@Url.Action("Autocomplete", "Supplier")?q=' + query)
                            .then(res => {
                                var items = res.data.items;
                                var supplier = _.find(items, ['name', query]);
                                //console.info(supplier);
                                if (supplier) {
                                    vm.supplierId = supplier.id;
                                    //vm.updateSupplierName();
                                }
                                done(res.data.items);
                            })
                            .catch(err => {
                                // any error handler
                            });
                    },
                    updateSupplierName: _.debounce(function (e) {
                        var data = { name: _.trim(this.supplierName), id: this.id, supplierId: this.supplierId };
                        this.$http.post('@Url.Action("UpdateSupplierName", "SupplierOffer")', data).then(function(res) {
                        }, function(res) {
                            alert('error');
                        });
                    }, 300)
                }
            });
        })();
    </script>
}
