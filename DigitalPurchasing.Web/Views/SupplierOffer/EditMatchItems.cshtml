@using Newtonsoft.Json
@model DigitalPurchasing.Core.Interfaces.SupplierOfferVm

@{
    ViewBag.Title = $"Коммерческое предложение № {Model.PublicId} от {Model.CreatedOn:dd.MM.yyyy HH:mm}";
    Layout = "_Layout";
    var deliveryCost = JsonConvert.SerializeObject(Model.DeliveryCost);
}

<partial name="_Header" model="@((string)ViewBag.Title, Model.CompetitionList.Id, (Guid?)Model.Id)" />

<h3>Подбор соответсвия номенклатуры в предложении поставщика номенклатуре предприятия</h3>

<div id="app">
    <div class="row">
        <div class="col-xs-12">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th colspan="4" class="form-inline">
                    <div class="form-group">
                        <label class="control-label">Номенклатура поставщика</label>&nbsp;
                        <input class="form-control" type="text" v-model="supplierName" readonly="readonly"/>
                    </div>
                    <th colspan="4" class="form-inline">
                        <div class="form-group">
                            <label class="control-label">Номенклатура предприятия</label>&nbsp;
                            <input class="form-control" type="text" value="@Model.CompanyName" readonly="readonly"/>
                        </div>
                    </th>
                </tr>
                <tr>
                    <th style="width: 5%" class="text-center">№</th>
                    <th style="width: 10%">Код</th>
                    <th>Наименование</th>
                    <th style="width: 10%">ЕИ</th>
                    <th style="width: 10%" class="border-left">Код</th>
                    <th>Наименование</th>
                    <th style="width: 10%">ЕИ</th>
                    <th style="width: 10%">Коэф.</th>
                    <th style="width: 10%"></th>
                </tr>
                </thead>
                <tbody>
                <tr v-for="item in items">
                    <td class="text-center">
                        {{getRowIndex(item)}}
                    </td>
                    <td>{{item.rawCode}}</td>
                    <td>{{item.rawName}}</td>
                    <td>{{item.rawUomStr}}</td>
                    <td v-if="isMatched(item)" class="border-left">{{item.nomenclatureCode}}</td>
                    <td v-if="isMatched(item)">{{item.nomenclatureName}}</td>
                    <td v-if="isMatched(item)">{{item.nomenclatureUom}}</td>
                    <td v-if="isMatched(item)">{{item.nomenclatureFactor > 0 ? item.nomenclatureFactor : item.commonFactor}}</td>
                    <td v-if="isMatched(item)">
                        <button type="button" class="btn btn-link" v-on:click="openMatch(item)">Изменить</button>
                    </td>
                    <td v-if="!isMatched(item)" class="border-left text-center" colspan="5">
                        <button type="button" class="btn btn-link" v-on:click="openMatch(item)">Сопоставить</button>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6">
            <div class="form-group">
                <label for="deliveryCost">Стоимость доставки</label>
                <input type="number" class="form-control" id="deliveryCost" placeholder="" min="0" v-model="deliveryCost" v-on:input="updateDeliveryCost">
            </div>
        </div>
    </div>
    <modal v-model="matchModal" v-if="currentItem" title="Сопоставьте номенклатуру предложения с номенклатурой Вашего предприятия" size="lg">
        <table class="table table-striped">
            <tbody>
            <tr>
                <td><b>Юр лицо</b></td>
                <td>{{supplierName}}</td>
                <td>@Model.CompanyName</td>
            </tr>
            <tr>
                <td><b>Номенклатура</b></td>
                <td>{{currentItem.rawName}}</td>
                <td>
                    <div class="form-group" v-bind:class="nomenclatureClass">
                        <input id="nomenclature" type="text" class="form-control" v-model="nomenclatureAutocomplete"/>
                        <typeahead v-model="selectedNomenclature" target="#nomenclature" force-select async-src="@Url.Action("Autocomplete", "Nomenclature")?q=" async-key="items" item-key="name"></typeahead>
                    </div>
                </td>
            </tr>
            <tr>
                <td><b>Единица измерения</b></td>
                <td>
                    <div class="form-group" v-bind:class="uomClass">
                        <input id="rawUom" type="text" class="form-control" v-model="uomAutocomplete"/>
                        <typeahead v-model="selectedUom" target="#rawUom" preselect="preselect" force-select async-src="@Url.Action("Autocomplete", "Uom")?q=" async-key="items" item-key="name"></typeahead>
                    </div>
                </td>
                <td>{{selectedNomenclatureUom}}</td>
            </tr>
            <tr>
                <td><b>Коэффициент</b></td>
                <td>1</td>
                <td>
                    <div class="form-inline">
                        <div class="radio">
                            <label>
                                <input type="radio" name="factor" value="c" v-model="factor">
                            </label>
                        </div>
                        <div class="form-group" v-bind:class="factorErrorClass">
                            <label class="control-label">Общий</label>
                            <input type="text" class="form-control" v-model="currentItem.commonFactor" :disabled="!isFactorCEnabled"/>
                        </div>
                    </div>
                    <div class="form-inline">
                        <div class="radio">
                            <label>
                                <input type="radio" name="factor" value="n" v-model="factor">
                            </label>
                        </div>
                        <div class="form-group" v-bind:class="factorErrorClass">
                            <label class="control-label">Только для этой номенклатуры</label>
                            <input type="text" class="form-control" v-model="currentItem.nomenclatureFactor" :disabled="!isFactorNEnabled"/>
                        </div>
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
        <div slot="footer" class="text-center">
            <button v-on:click="prevMatch" v-bind:style="{ visibility: isPrevEnabled ? 'visible' : 'hidden' }" class="btn btn-default pull-left">Предыдущая позиция</button>
            <button v-on:click="saveMatch" class="btn btn-primary" :disabled="!isSaveEnabled">Подтвердить</button>
            <button v-on:click="closeMatch" class="btn btn-default">Отменить</button>
            <button v-on:click="nextMatch" v-bind:style="{ visibility: isNextEnabled ? 'visible' : 'hidden' }" class="btn btn-default pull-right">Следующая позиция</button>
        </div>
    </modal>
</div>

@section Scripts {
    <script>
        (function() {
            function getInputClass(hasError) {
                return {
                    'has-error': hasError,
                    'has-success': !hasError
                };
            };

            var app = new Vue({
                el: '#app',
                data: function() {
                    return {
                        prId: '@Model.Id',
                        supplierName: '',
                        matchModal: false,
                        currentItem: null,
                        selectedNomenclature: null,
                        selectedUom: null,
                        nomenclatureAutocomplete: '',
                        uomAutocomplete: '',
                        items: [],
                        preselect: false,
                        factor: 'c',
                        deliveryCost: @deliveryCost
                    };
                },
                created: function() {
                    var vm = this;
                    this.$http.get('@Url.Action("MatchItemsData", new { id = Model.Id })').then(function(res) {
                        var dataRes = res.body;
                        vm.items = dataRes.items;
                        vm.supplierName = dataRes.supplierName;
                    }, function(res) {

                    });
                },
                watch: {
                    selectedNomenclature: function (val) {
                        if (val) {
                            this.nomenclatureAutocomplete = val.name;
                        }
                        this.loadFactor();
                    },
                    selectedUom: function (val) {
                        if (val) {
                            this.uomAutocomplete = val.name;
                        }
                        this.loadFactor();
                    }
                },
                computed: {
                    isPrevEnabled: function() {
                        if (!this.currentItem) return false;
                        return this.getRowIndex0(this.currentItem) > 0;
                    },
                    isNextEnabled: function() {
                        if (!this.currentItem) return false;
                        var length0 = this.items.length-1;
                        return this.getRowIndex0(this.currentItem) < length0;
                    },
                    isSaveEnabled: function() {
                        return !this.nomenclatureHasError && !this.uomHasError && !this.factorHasError;
                    },
                    isFactorCEnabled: function() {
                        if (!this.selectedNomenclature || !this.selectedUom || this.factor === 'n') return false;
                        return true;
                    },
                    isFactorNEnabled: function() {
                        if (!this.selectedNomenclature || !this.selectedUom || this.factor === 'c') return false;
                        return true;
                    },
                    nomenclatureHasError: function() {
                        return !this.selectedNomenclature;
                    },
                    uomHasError: function() {
                        return !this.selectedUom || this.selectedUom === this.uomAutocomplete;
                    },
                    factorHasError: function() {
                        if (!this.currentItem) return false;
                        var common = this.currentItem.commonFactor;
                        var nomenclature = this.currentItem.nomenclatureFactor;
                        if (common <= 0 && nomenclature <= 0) return true;
                        return false;
                    },
                    selectedNomenclatureUom: function() {
                        if (this.selectedNomenclature) {
                            return this.selectedNomenclature.batchUomName;
                        }
                        return '';
                    },
                    nomenclatureClass: function () { return getInputClass(this.nomenclatureHasError); },
                    uomClass: function () { return getInputClass(this.uomHasError); },
                    factorErrorClass: function () { return getInputClass(this.factorHasError); }
                },
                methods: {
                    getRowIndex0: function (item) {
                        return this.items.indexOf(item);
                    },
                    getRowIndex: function (item) {
                        return this.getRowIndex0(item) + 1;
                    },
                    isMatched: function(item) {
                        return item.nomenclatureId && item.rawUomId && (item.nomenclatureFactor > 0 || item.commonFactor > 0);
                    },
                    openMatch: function (item) {
                        this.currentItem = item;
                        this.matchModal = true;
                        this.loadMatch();
                    },
                    closeMatch: function () {
                        this.currentItem = null;
                        this.matchModal = false;
                    },
                    loadMatch: function () {
                        if (this.currentItem.nomenclatureId) {
                            this.loadNomenclature(this.currentItem.nomenclatureId);
                        } else {
                            //this.nomenclatureAutocomplete = '';
                            this.selectedNomenclature = null;
                        }
                        if (this.currentItem.rawUomId) {
                            this.loadUom(this.currentItem.rawUomId);
                        } else {
                            //this.uomAutocomplete = this.currentItem.rawUom;
                            this.selectedUom = null;
                        }
                    },
                    prevMatch: function () {
                        var index = this.getRowIndex0(this.currentItem);
                        this.currentItem = null;
                        this.currentItem = this.items[index-1];
                        this.loadMatch();
                    },
                    nextMatch: function () {
                        var index = this.getRowIndex0(this.currentItem);
                        this.currentItem = null;
                        this.currentItem = this.items[index+1];
                        this.loadMatch();
                    },
                    saveMatch: function () {
                        var $this = this;
                        var data = {
                            itemId: $this.currentItem.id,
                            nomenclatureId: $this.selectedNomenclature.id,
                            uomId: $this.selectedUom.id,
                            factorC: $this.factor === 'c' ? $this.currentItem.commonFactor : 0,
                            factorN: $this.factor === 'n' ? $this.currentItem.nomenclatureFactor : 0
                        };
                        console.info('saveMatch', data);
                        this.$http.post('@Url.Action("SaveMatchItem")', data).then(function(res) {
                            var index = $this.getRowIndex0($this.currentItem);
                            $this.items[index].nomenclatureId = $this.selectedNomenclature.id;
                            $this.items[index].nomenclatureName = $this.selectedNomenclature.name;
                            $this.items[index].nomenclatureCode = $this.selectedNomenclature.code;
                            $this.items[index].nomenclatureUom = $this.selectedNomenclature.batchUomName;
                            $this.items[index].rawUomId = $this.selectedUom.id;
                        }, function(res) {
                            alert('error');
                        });
                    },
                    loadNomenclature: function(id) {
                        var $this = this;
                        this.$http.get('@Url.Action("AutocompleteSingle", "Nomenclature")' + '?id=' + id).then(function(res) {
                            var dataRes = res.body;
                            if (dataRes.isSuccess) {
                                $this.selectedNomenclature = dataRes.data;
                                //$this.nomenclatureAutocomplete = dataRes.data.name;
                            } else {
                                alert('error');
                            }
                        }, function(res) {
                            alert('error');
                        });
                    },
                    loadUom: function(id) {
                        var $this = this;
                        this.$http.get('@Url.Action("AutocompleteSingle", "Uom")' + '?id=' + id).then(function(res) {
                            var dataRes = res.body;
                            if (dataRes.isSuccess) {
                                $this.selectedUom = dataRes.data;
                                //$this.uomAutocomplete = dataRes.data.name;
                            } else {
                                alert('error');
                            }
                        }, function(res) {
                            alert('error');
                        });
                    },
                    loadFactor: _.debounce(function (e) {
                        var $this = this;

                        if (!this.nomenclatureHasError && !this.uomHasError) {
                            var from = this.selectedUom.id;
                            var to = this.selectedNomenclature.batchUomId;
                            var nom = this.selectedNomenclature.id;
                            this.$http.post('@Url.Action("Factor", "Uom")', { from, to, nom }).then(function (res) {
                                var dataRes = res.body;
                                $this.currentItem.commonFactor = dataRes.commonFactor;
                                $this.currentItem.nomenclatureFactor = dataRes.nomenclatureFactor;
                                if (dataRes.nomenclatureFactor > 0) {
                                    $this.factor = 'n';
                                } else {
                                    $this.factor = 'c';
                                }
                            }, function (res) {
                                alert('error');
                            });
                        } else { $this.factor = 'c' }
                    }, 300),
                    updateDeliveryCost: _.debounce(function (e) {
                        var data = { deliveryCost: this.deliveryCost, id: this.prId };
                        this.$http.post('@Url.Action("UpdateDeliveryCost", "SupplierOffer")', data).then(function(res) {
                        }, function(res) {
                            alert('error');
                        });
                    }, 300)
                }
            });
        })();
    </script>
}
